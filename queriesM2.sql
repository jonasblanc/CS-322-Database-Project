-- Architecture
SELECT
A.X, A.Y, A.X/A.Y 

FROM
(
    SELECT 
        (Q1) AS X,
        (Q2) AS Y
        FROM DUAL 
)A;


--QUERY1--
SELECT EXTRACT(YEAR FROM C.COLLISION_DATE) AS YEAR, COUNT(*) AS NUMBER_COLLISIONS 
FROM COLLISIONS C
GROUP BY EXTRACT(YEAR FROM C.COLLISION_DATE)
ORDER BY EXTRACT(YEAR FROM C.COLLISION_DATE) ASC;

--QUERY2--
--REMARK: FETCH FIRST ROWS ONLY is the equivalent to LIMIT IN MySQL
SELECT P.VEHICLE_MAKE, COUNT(*) AS NUMBER_VEHICLE 
FROM PARTIES P
GROUP BY P.VEHICLE_MAKE
ORDER BY COUNT(*) DESC
FETCH FIRST 1 ROW ONLY;

--QUERY3--
SELECT ROUND(A.NUMBER_COLLISIONS_UNDER_DARK/A.TOTAL_NUMBER_COLLISIONS, 3) AS FRACTION_UNDER_DARK
FROM(   
    SELECT
        (SELECT COUNT(*)
            FROM COLLISIONS C
            WHERE C.LIGHTING_ID IN
                (   SELECT L.ID 
                    FROM LIGHTING L
                    WHERE LOWER(L.DEFINITION) LIKE '%dark%')) AS NUMBER_COLLISIONS_UNDER_DARK,
            (SELECT COUNT(*) FROM COLLISIONS) AS TOTAL_NUMBER_COLLISIONS
    FROM DUAL 
)A;



--QUERY4--
SELECT COUNT(*) AS NUMBER_COLLISIONS_SNOWY_WEATHER 
FROM COLLISION_WITH_WEATHER CWW
WHERE CWW.WEATHER_ID IN
    (   SELECT W.ID 
        FROM WEATHER W
        WHERE LOWER(W.DEFINITION) LIKE '%snow%');

--QUERY5--
SELECT TO_CHAR(C.COLLISION_DATE, 'DAY') AS WEEKDAY, COUNT(*) AS NUMBER_COLLISIONS
FROM COLLISIONS C
GROUP BY TO_CHAR(C.COLLISION_DATE, 'DAY')
ORDER BY COUNT(*) DESC
FETCH FIRST 1 ROW ONLY;

--QUERY6--
-- HOW TO PUT ALL VALUES NOT IN CWW TO 0?
SELECT W.DEFINITION, COUNT(*) AS NUMBER_COLLISIONS 
FROM WEATHER W, COLLISION_WITH_WEATHER CWW
WHERE W.ID=CWW.WEATHER_ID
GROUP BY W.DEFINITION --OR GROUPBY CWW.WHEATHER_ID MAYBE, SHOULD BE THE SAME
ORDER BY COUNT(*) DESC;

--QUERY7--
SELECT COUNT(*) AS NUMBER_AT_FAULT_WITH_FIN_REP_LOOSE_MAT
FROM PARTIES P, FINANCIAL_RESPONSIBILITY FR, COLLISIONS COL, COLLISION_WITH_ROAD_CONDITION CWRC, ROAD_CONDITION RC
WHERE P.AT_FAULT = 'T'
AND P.FINANCIAL_RESPONSIBILITY_ID = FR.ID
AND LOWER(FR.DEFINITION) LIKE '%yes%'
AND P.COLLISION_CASE_ID = COL.CASE_ID
AND COL.CASE_ID = CWRC.CASE_ID
AND CWRC.ROAD_CONDITION_ID = RC.ID
AND LOWER(RC.DEFINITION) LIKE '%loose material%'

--QUERY8--
SELECT
A.VICTIM_AGE_MEDIAN, A.MOST_COMMON_VICTIM_SEATING_POSITION 

FROM
(
    SELECT 
        (   SELECT MEDIAN(V.VICTIM_AGE) 
            FROM VICTIMS V) AS VICTIM_AGE_MEDIAN,
        (   SELECT VSP.DEFINITION 
            FROM VICTIM_SEATING_POSITION VSP
            WHERE VSP.ID IN
            (   SELECT V.VICTIM_SEATING_POSITION_ID 
                FROM VICTIMS V
                GROUP BY V.VICTIM_SEATING_POSITION_ID
                ORDER BY COUNT(*) DESC
                FETCH FIRST 1 ROW ONLY)) AS MOST_COMMON_VICTIM_SEATING_POSITION
    FROM DUAL 
)A;


--QUERY9--
-- FASTER ONE IN "NOT USED BELOW"
SELECT ROUND(A.NUMBER_VICTIM_WITH_BELT / (A.TOTAL_VICTIM + A.TOTAL_PARTIES), 3) AS FRACTION_WITH_BELT
FROM
(
    SELECT 
        (SELECT COUNT(*)
        FROM VICTIMS V
        WHERE V.ID IN
            (   SELECT VEWSE.VICTIM_ID 
                FROM VICTIM_EQUIPPED_WITH_SAFETY_EQUIPMENT VEWSE
                WHERE VEWSE.SAFETY_EQUIPMENT_ID IN
                    (   SELECT SE.ID 
                        FROM SAFETY_EQUIPMENT SE
                        WHERE LOWER(SE.DEFINITION) LIKE '%belt use%'))) AS NUMBER_VICTIM_WITH_BELT,
        (SELECT COUNT(*) FROM VICTIMS) AS TOTAL_VICTIM,
        (SELECT COUNT(*) FROM PARTIES) AS TOTAL_PARTIES
        FROM DUAL 
)A;

--QUERY 10--
-- What about collision with null hour ? Count them as well ?
SELECT EXTRACT(HOUR FROM C.COLLISION_TIME) AS HOUR, ROUND(COUNT(*)/(  SELECT COUNT(*) FROM COLLISIONS), 3) AS FRACTION_COLLISIONS 
FROM COLLISIONS C
GROUP BY EXTRACT(HOUR FROM C.COLLISION_TIME)
ORDER BY EXTRACT(HOUR FROM C.COLLISION_TIME) ASC;

------------- NOT USED -------------

-- QUERY 3

-- V2
SELECT  
    (
        (SELECT COUNT(*)
        FROM COLLISIONS C
        WHERE C.LIGHTING_ID IN
            (   SELECT L.ID 
                FROM LIGHTING L
                WHERE LOWER(L.DEFINITION) LIKE '%dark%'))
       /(SELECT COUNT(*) FROM COLLISIONS)
   )
AS FRACTION_DARK 
FROM DUAL;

--QUERY8--
--INDIVIDUAL, would it make sense to group them? How?
SELECT MEDIAN(V.VICTIM_AGE) AS MEDIAN FROM VICTIMS V;

SELECT VSP.DEFINITION 
FROM VICTIM_SEATING_POSITION VSP
WHERE VSP.ID IN
    (   SELECT V.VICTIM_SEATING_POSITION_ID 
        FROM VICTIMS V
        GROUP BY V.VICTIM_SEATING_POSITION_ID
        ORDER BY COUNT(*) DESC
        FETCH FIRST 1 ROW ONLY);

--QUERY9--
-- Working but inefficient
SELECT
    AVG(CASE WHEN V2.ID IN
        (   SELECT VEWSE.VICTIM_ID 
            FROM VICTIM_EQUIPPED_WITH_SAFETY_EQUIPMENT VEWSE
            WHERE VEWSE.SAFETY_EQUIPMENT_ID IN
                (   SELECT SE.ID 
                    FROM SAFETY_EQUIPMENT SE
                    WHERE LOWER(SE.DEFINITION) LIKE '%belt use%')) THEN 1.0 ELSE 0 END)
AS FRACTION_WITH_BELT
FROM VICTIMS V2;

-- V3 best one
SELECT  
    (
        (SELECT COUNT(*)
        FROM VICTIMS V
        WHERE V.ID IN
            (   SELECT VEWSE.VICTIM_ID 
                FROM VICTIM_EQUIPPED_WITH_SAFETY_EQUIPMENT VEWSE
                WHERE VEWSE.SAFETY_EQUIPMENT_ID IN
                    (   SELECT SE.ID 
                        FROM SAFETY_EQUIPMENT SE
                        WHERE LOWER(SE.DEFINITION) LIKE '%belt use%')))
        / (SELECT COUNT(*) FROM VICTIMS) 
    )
AS FRACTION_WITH_BELT
FROM DUAL;

-- FASTER THAN THE ONE USER
SELECT  
    (
        (SELECT COUNT(*)
        FROM VICTIMS V
        WHERE V.ID IN
            (   SELECT VEWSE.VICTIM_ID 
                FROM VICTIM_EQUIPPED_WITH_SAFETY_EQUIPMENT VEWSE
                WHERE VEWSE.SAFETY_EQUIPMENT_ID IN
                    (   SELECT SE.ID 
                        FROM SAFETY_EQUIPMENT SE
                        WHERE LOWER(SE.DEFINITION) LIKE '%belt use%')))
        / ((SELECT COUNT(*) FROM VICTIMS) 
        + (SELECT COUNT(*) FROM PARTIES) 
        )
    )
AS FRACTION_WITH_BELT
FROM DUAL;
